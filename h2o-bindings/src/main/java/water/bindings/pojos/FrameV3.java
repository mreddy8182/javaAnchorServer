/*
 * This file is auto-generated by h2o-3/h2o-bindings/bin/gen_java.py
 * Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)
 */
package water.bindings.pojos;

import com.google.gson.Gson;
import com.google.gson.annotations.*;


public class FrameV3 extends FrameBaseV3 {

    /**
     * Row offset to display
     */
    @SerializedName("row_offset")
    public long rowOffset;

    /**
     * Number of rows to display
     */
    @SerializedName("row_count")
    public int rowCount;

    /**
     * Column offset to return
     */
    @SerializedName("column_offset")
    public int columnOffset;

    /**
     * Number of columns to return
     */
    @SerializedName("column_count")
    public int columnCount;

    /**
     * Number of full columns to return. The columns between full_column_count and column_count will be returned without
     * the data
     */
    @SerializedName("full_column_count")
    public int fullColumnCount;

    /**
     * Total number of columns in the Frame
     */
    @SerializedName("total_column_count")
    public int totalColumnCount;

    /**
     * checksum
     */
    public long checksum;

    /**
     * Number of rows in the Frame
     */
    public long rows;

    /**
     * Number of columns in the Frame
     */
    @SerializedName("num_columns")
    public long numColumns;

    /**
     * Default percentiles, from 0 to 1
     */
    @SerializedName("default_percentiles")
    public double[] defaultPercentiles;

    /**
     * Columns in the Frame
     */
    public ColV3[] columns;

    /**
     * Compatible models, if requested
     */
    @SerializedName("compatible_models")
    public String[] compatibleModels;

    /**
     * Chunk summary
     */
    @SerializedName("chunk_summary")
    public TwoDimTableV3 chunkSummary;

    /**
     * Distribution summary
     */
    @SerializedName("distribution_summary")
    public TwoDimTableV3 distributionSummary;


    /*------------------------------------------------------------------------------------------------------------------
    //                                                  INHERITED
    //------------------------------------------------------------------------------------------------------------------

    // Frame ID
    public FrameKeyV3 frameId;

    // Total data size in bytes
    public long byteSize;

    // Is this Frame raw unparsed data?
    public boolean isText;

    // Comma-separated list of JSON field paths to exclude from the result, used like:
    // "/3/Frames?_exclude_fields=frames/frame_id/URL,__meta"
    public String _excludeFields;

    */

    /**
     * Public constructor
     */
    public FrameV3() {
        rowOffset = 0L;
        rowCount = 0;
        columnOffset = 0;
        columnCount = 0;
        fullColumnCount = 0;
        totalColumnCount = 0;
        checksum = 0L;
        rows = 0L;
        numColumns = 0L;
        byteSize = 0L;
        isText = false;
        _excludeFields = "";
    }

    /**
     * Return the contents of this object as a JSON String.
     */
    @Override
    public String toString() {
        return new Gson().toJson(this);
    }

}
